// import PushNotification from 'react-native-push-notification';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default async dataBanyakObat => {
  let dataScheduleObat = await AsyncStorage.getItem('ScheduleObat')
  let data = dataScheduleObat ? JSON.parse(dataScheduleObat) : []
  let temp = dataBanyakObat.map(async (el, i) => {
    let index = await AsyncStorage.getItem('indexnotif') || 1
    let y = +index + i
    let z = await createMedicineLocalScheduleNotification(el, y);
    await AsyncStorage.setItem('indexnotif', JSON.stringify(y + 1))
    return z
  });

  let result = await Promise.all(temp)

  let zam = data.concat(result)

  console.log(zam, '[INI DATANYA]')

  await AsyncStorage.setItem('ScheduleObat', JSON.stringify(zam))

  // console.log(result, '[INI RESULT]')
  // dataScheduleObat
};

const createMedicineLocalScheduleNotification = (dataSatuObat, index) => {
  return new Promise(async (res, rej) => {
    try {
      // console.log('KEPANGGIL COK')

      // console.log(dataSatuObat, '[INI DATA SATU OBAT]')
      
      let pengulangan = [];
      if(+dataSatuObat.etiquetteAmmount){
        switch (+dataSatuObat.etiquetteAmmount) {
          case 1:
            pengulangan = [
              {
                jam: 12,
                menit: 0,
              },
            ];
            break;
          case 2:
            pengulangan = [
              {
                jam: 7,
                menit: 0,
              },
              {
                jam: 19,
                menit: 0,
              },
            ];
            break;
          case 3:
            pengulangan = [
              {
                jam: 7,
                menit: 0,
              },
              {
                jam: 13,
                menit: 0,
              },
              {
                jam: 19,
                menit: 0,
              },
            ];
            break;
          case 4:
            pengulangan = [
              {
                jam: 7,
                menit: 0,
              },
              {
                jam: 12,
                menit: 0,
              },
              {
                jam: 17,
                menit: 0,
              },
              {
                jam: 21,
                menit: 0,
              },
            ];
            break;
          case 5:
            pengulangan = [
              {
                jam: 7,
                menit: 0,
              },
              {
                jam: 11,
                menit: 0,
              },
              {
                jam: 15,
                menit: 0,
              },
              {
                jam: 19,
                menit: 0,
              },
              {
                jam: 23,
                menit: 0,
              },
            ];
            break;
          default:
            break;
        }
      }else{
        pengulangan = dataSatuObat.schedule
      }

      let dataObat = {
        drugName: dataSatuObat.drugName,
        schedule: pengulangan,
        quantity: dataSatuObat.quantity,
        dose: dataSatuObat.dose,
        otherInstruction: dataSatuObat.otherInstruction,
        notif : true
      };

      let jumlahTrigger = Math.floor(dataSatuObat.quantity / (dataSatuObat.dose * pengulangan.length)) 

      pengulangan.forEach((el, i) => {
        let triggerTime = new Date();
        triggerTime.setHours(el.jam, el.menit, 0);
        console.log(triggerTime)

        let notifId = index.toString() + i.toString()
        console.log(notifId, 'ini notif idnya')

        // PushNotification.localNotificationSchedule({
        //   /* Android Only Properties */
        //   id: notifId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        //   // ticker: "My Notification Ticker", // (optional)
        //   autoCancel: true, // (optional) default: true
        //   largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
        //   smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
        //   bigText: `Please take your ${dataSatuObat.drugName}`, // (optional) default: "message" prop
        //   // subText: `Please take your ${dataSatuObat.drugName}`, // (optional) default: none
        //   // color: "red", // (optional) default: system default
        //   vibrate: true, // (optional) default: true
        //   // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        //   tag: `${jumlahTrigger}`, // (optional) add tag to message
        //   group: 'obat_notification', // (optional) add group to message
        //   ongoing: false, // (optional) set whether this is an "ongoing" notification
        //   priority: 'high', // (optional) set notification priority, default: high
        //   visibility: 'private', // (optional) set notification visibility, default: private
        //   importance: 'high', // (optional) set notification importance, default: high
        //   allowWhileIdle: false, // (optional) set notification to work while on doze, default: false
        //   ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
        //   data : {
        //     ... dataSatuObat
        //   },
        //   /* iOS only properties */
        //   alertAction: 'view', // (optional) default: view
        //   category: '', // (optional) default: empty string
        //   // userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)

        //   /* iOS and Android properties */
        //   // title: "My Notification Title", // (optional)
        //   message: 'My Notification Message', // (required)
        //   playSound: true, // (optional) default: true
        //   soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        //   number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        //   repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        //   date: triggerTime,
        //   // actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
        // });

      });

      dataObat.notifIndex = index

      console.log('PROCESS DONE');
      // console.log('ini pengulangan', pengulangan);
      res(dataObat)
    } catch (error) {
      console.log('ADA ERROR');
      console.warn(error);
      rej(error)
    }
  })

};
